import Data.Complex
import Graphics.UI.GLUT

type Point = Complex Float
type Edge  = (Point, Point)

numOfFourierTerms :: Int -- Number of Fourier Terms, play around with it!
                         -- Don't set number about 200, the image will break
numOfFourierTerms = 200

numOfSteps :: Int --Number of Iterations, set it as high as you want to
numOfSteps = 300

traced_points :: [Point] -- The sample points of image, the first one is Julian and the second is Don
traced_points = [(533:+748),(534:+686),(534:+593),(534:+494),(536:+474),(496:+501),(438:+571),(393:+623),(377:+638),(355:+660),(345:+668),(322:+640),(294:+605),(334:+565),(378:+507),(418:+455),(442:+422),(485:+493),(512:+480),(531:+463),(498:+458),(467:+458),(445:+419),(457:+356),(465:+308),(480:+262),(489:+216),(498:+189),(461:+135),(379:+77),(331:+48),(274:+31),(230:+16),(155:+35),(111:+62),(89:+76),(56:+111),(35:+158),(13:+217),(11:+264),(15:+303),(28:+335),(48:+370),(88:+411),(93:+418),(106:+438),(112:+482),(138:+500),(162:+529),(187:+552),(222:+568),(275:+566),(310:+556),(352:+535),(376:+509),(389:+490),(395:+484),(417:+456),(427:+437),(428:+424),(417:+401),(416:+397),(428:+388),(436:+367),(439:+333),(435:+301),(419:+308),(411:+314),(399:+280),(394:+265),(372:+261),(366:+254),(372:+213),(364:+188),(355:+174),(326:+161),(305:+161),(284:+170),(264:+184),(249:+198),(221:+216),(200:+225),(161:+229),(120:+230),(91:+227),(70:+223),(68:+223),(65:+259),(69:+302),(76:+348),(82:+376),(106:+344),(129:+351),(150:+350),(172:+341),(185:+331),(165:+325),(143:+327),(119:+336),(105:+343),(95:+334),(94:+319),(108:+308),(136:+303),(150:+302),(168:+305),(182:+310),(191:+318),(179:+320),(168:+314),(140:+316),(125:+322),(99:+333),(93:+335),(106:+343),(135:+353),(162:+342),(186:+333),(203:+328),(233:+299),(250:+287),(280:+275),(310:+274),(340:+275),(352:+283),(352:+289),(328:+290),(302:+291),(283:+300),(255:+305),(235:+304),(261:+318),(286:+301),(312:+296),(325:+298),(338:+303),(343:+310),(328:+318),(313:+321),(291:+322),(268:+324),(263:+319),(256:+316),(240:+302),(206:+318),(205:+338),(197:+354),(192:+376),(185:+392),(179:+407),(181:+417),(191:+423),(209:+431),(224:+432),(245:+425),(271:+414),(256:+427),(237:+437),(239:+450),(260:+454),(275:+454),(302:+457),(313:+461),(312:+466),(289:+475),(271:+481),(260:+486),(229:+492),(210:+493),(184:+490),(177:+479),(205:+467),(222:+461),(243:+458),(282:+457),(294:+460),(271:+467),(249:+470),(234:+472),(208:+478),(194:+480),(182:+483),(141:+496),(160:+524),(182:+540),(194:+552),(206:+561),(222:+564),(227:+574),(232:+586),(240:+601),(248:+620),(252:+637),(262:+659),(266:+667),(271:+670),(273:+693),(269:+708),(271:+720),(267:+684),(273:+668),(282:+664),(316:+667),(343:+672),(328:+688),(313:+705),(302:+716),(286:+729),(270:+726),(253:+714),(239:+701),(218:+682),(205:+668),(189:+656),(172:+635),(174:+617),(179:+604),(147:+632),(128:+656),(117:+673),(110:+685),(105:+702),(103:+728),(97:+738),(117:+740),(145:+740),(185:+741),(253:+743),(304:+742),(350:+742),(428:+736),(449:+737),(404:+743),(473:+739),(493:+739),(516:+739)]
-- traced_points = [(1:+641),(1:+574),(41:+550),(91:+522),(136:+464),(141:+461),(176:+435),(216:+462),(242:+495),(243:+494),(271:+512),(311:+528),(344:+527),(368:+521),(395:+486),(407:+439),(421:+389),(426:+337),(419:+288),(414:+268),(397:+258),(378:+256),(387:+265),(374:+272),(368:+269),(366:+264),(382:+256),(362:+261),(354:+266),(304:+276),(286:+271),(268:+275),(244:+281),(238:+285),(259:+287),(254:+283),(265:+286),(276:+284),(279:+276),(305:+274),(346:+272),(355:+289),(362:+309),(370:+321),(381:+338),(373:+350),(356:+362),(334:+356),(310:+355),(337:+361),(384:+365),(373:+360),(346:+363),(327:+361),(298:+369),(270:+377),(257:+386),(257:+399),(276:+395),(297:+391),(322:+390),(353:+389),(370:+384),(379:+380),(366:+392),(354:+405),(329:+409),(306:+410),(290:+407),(281:+398),(276:+407),(303:+416),(327:+417),(347:+414),(359:+411),(370:+396),(372:+388),(412:+375),(402:+388),(393:+413),(386:+429),(382:+449),(380:+471),(372:+483),(346:+491),(320:+492),(302:+481),(291:+469),(274:+448),(257:+431),(234:+412),(218:+396),(200:+369),(193:+356),(177:+329),(170:+305),(167:+276),(178:+256),(173:+235),(164:+208),(162:+178),(183:+158),(199:+143),(225:+137),(248:+133),(268:+108),(276:+95),(296:+98),(319:+105),(338:+112),(356:+128),(365:+138),(378:+159),(385:+178),(396:+203),(405:+218),(404:+193),(404:+159),(393:+135),(378:+113),(352:+78),(345:+61),(310:+46),(255:+40),(218:+43),(187:+50),(160:+65),(139:+81),(122:+103),(118:+109),(103:+135),(97:+147),(72:+161),(51:+180),(50:+211),(53:+235),(49:+255),(47:+293),(51:+314),(60:+341),(67:+350),(72:+375),(80:+393),(83:+402),(96:+421),(108:+434),(122:+441),(133:+439),(134:+426),(127:+413),(143:+401),(135:+403),(117:+399),(101:+381),(88:+359),(77:+335),(72:+311),(78:+289),(89:+283),(104:+284),(117:+290),(125:+305),(112:+319),(106:+331),(102:+342),(116:+357),(133:+363),(150:+386),(156:+407),(175:+430),(203:+457),(223:+472),(243:+493),(232:+483),(259:+502),(278:+513),(302:+524),(327:+530),(357:+526),(376:+517),(395:+497),(400:+483),(407:+471),(422:+473),(458:+480),(478:+483),(482:+509),(483:+540),(484:+572),(485:+602),(480:+634),(480:+642),(451:+640),(419:+641),(411:+609),(405:+591),(405:+574),(399:+548),(393:+528),(390:+514),(370:+521),(344:+528),(324:+542),(318:+550),(305:+560),(299:+564),(316:+570),(329:+580),(338:+586),(359:+607),(367:+618),(380:+631),(390:+639),(211:+640),(222:+626),(235:+606),(243:+596),(254:+583),(263:+576),(276:+571),(271:+561),(246:+553),(237:+548),(226:+541),(207:+533),(198:+526),(178:+513),(174:+510),(159:+498),(156:+489),(143:+470),(143:+464),(137:+471),(136:+486),(130:+513),(136:+528),(142:+556),(150:+586),(160:+617),(168:+635),(159:+642),(112:+641),(59:+642),(3:+641)]

edges :: [Edge]
edges = [e | e <- zip traced_points 
        (tail traced_points ++ [head traced_points])]

midpoint :: Edge -> Point
midpoint (p1, p2) = (p1 + p2) / 2

num_of_points :: Int
num_of_points = length traced_points

--Generating Fourier Coefficients
nthCoefficient :: Int -> Point
nthCoefficient index = sum [midpoint edge * exp (power i) / num_points
                          | (edge, i) <- zip edges [0 ..]]
                          where power i    = -2 * pi * fromIntegral index * (0:+i) / num_points
                                num_points = fromIntegral num_of_points

nthCoefficientsList :: Int -> [(Int, Point)]
nthCoefficientsList n = [(i, nthCoefficient i) | i <- [-n..n]]

fourierFunction :: Int -> Float -> Point
fourierFunction n t = sum [c * exp (power i) | (i, c) <- nthCoefficientsList n]
                          where power i = -2 * pi * (0:+t) * fromIntegral i

pointsDraw :: Int -> [Point] --Generating Points
pointsDraw n = [fourierFunction n (t i) | i <- [0..numOfSteps]]
               where t i = fromIntegral i / fromIntegral numOfSteps

--Setting Upper and Lower Bound of Points
max' :: [Point] -> Float
max' points = foldr1 max (foldr (++) [] [[a,b]| (a:+b) <- points])

min' :: [Point] -> Float
min' points = foldr1 min (foldr (++) [] [[a,b]| (a:+b) <- points])

--Scaling X and Y Co-ord vals
scaling :: [Point] -> [(GLfloat,GLfloat,GLfloat)]
scaling points = [((2*x-lowerBound-upperBound)/interval, (upperBound+lowerBound-y*2)/interval, 0) | (x:+y) <- points]
                 where lowerBound = min' points
                       upperBound = max' points
                       interval   = upperBound - lowerBound

--Points to be Plotted
twoDimensionPoints :: Int -> [(GLfloat,GLfloat,GLfloat)]
twoDimensionPoints n = scaling [point | point <- pointsDraw n]

main :: IO ()
main = do
  (_progName, _args) <- getArgsAndInitialize
  _window <- createWindow "Head"
  windowSize $= Size 720 720
  displayCallback $= display
  mainLoop

display :: DisplayCallback
display = do 
  clear [ColorBuffer]
  renderPrimitive LineLoop $
     mapM_ (\(x, y, z) -> vertex $ Vertex3 x y z) (twoDimensionPoints numOfFourierTerms)
  flush
